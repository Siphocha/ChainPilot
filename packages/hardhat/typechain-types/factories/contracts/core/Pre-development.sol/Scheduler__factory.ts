/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Scheduler,
  SchedulerInterface,
} from "../../../../contracts/core/Pre-development.sol/Scheduler";

const _abi = [
  {
    inputs: [],
    name: "InvalidTask",
    type: "error",
  },
  {
    inputs: [],
    name: "TaskAlreadyCancelled",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
    ],
    name: "TaskCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "executeAt",
        type: "uint256",
      },
    ],
    name: "TaskScheduled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
    ],
    name: "cancelTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "to",
        type: "uint256",
      },
    ],
    name: "getPendingTasks",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "executeAt",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "scheduleTask",
    outputs: [
      {
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "taskIdCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tasks",
    outputs: [
      {
        internalType: "uint256",
        name: "executeAt",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "isCancelled",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610907806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80637eec20a81461005c5780638d97767214610071578063ad8ef91c1461009e578063c31784e8146100b5578063d817609e146100d5575b600080fd5b61006f61006a366004610574565b6100e8565b005b61008461007f366004610574565b610186565b60405161009595949392919061058d565b60405180910390f35b6100a760015481565b604051908152602001610095565b6100c86100c336600461060c565b61024e565b604051610095919061062e565b6100a76100e3366004610672565b610404565b600081815260208190526040902060018101546001600160a01b03163314610122576040516282b42960e81b815260040160405180910390fd5b600481015460ff161561014857604051630183ec1d60e21b815260040160405180910390fd5b60048101805460ff1916600117905560405182907fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed690600090a25050565b600060208190529081526040902080546001820154600283015460038401805493946001600160a01b039384169493909216926101c290610707565b80601f01602080910402602001604051908101604052809291908181526020018280546101ee90610707565b801561023b5780601f106102105761010080835404028352916020019161023b565b820191906000526020600020905b81548152906001019060200180831161021e57829003601f168201915b5050506004909301549192505060ff1685565b6060600061025c8484610757565b61026790600161076a565b67ffffffffffffffff81111561027f5761027f61077d565b6040519080825280602002602001820160405280156102a8578160200160208202803683370190505b5090506000845b8481116103f857600081815260208181526040808320815160a0810183528154815260018201546001600160a01b039081169482019490945260028201549093169183019190915260038101805460608401919061030c90610707565b80601f016020809104026020016040519081016040528092919081815260200182805461033890610707565b80156103855780601f1061035a57610100808354040283529160200191610385565b820191906000526020600020905b81548152906001019060200180831161036857829003601f168201915b50505091835250506004919091015460ff161515602090910152805190915042108015906103b557508060800151155b156103e5578184846103c681610793565b9550815181106103d8576103d86107ac565b6020026020010181815250505b50806103f081610793565b9150506102af565b50815290505b92915050565b60004285108061041b57506001600160a01b038416155b1561043957604051630531bbb160e01b815260040160405180910390fd5b6001805490600061044983610793565b9190505590506040518060a00160405280868152602001336001600160a01b03168152602001856001600160a01b0316815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602091820181905283815280825260409081902083518155918301516001830180546001600160a01b03199081166001600160a01b0393841617909155918401516002840180549093169116179055606082015160038201906105199082610811565b50608091909101516004909101805460ff1916911515919091179055604051858152339082907f3819b22c8ace0f6c8b3a34ee9f09bb8b7685eeec1427617e12f9bf761c9595949060200160405180910390a3949350505050565b60006020828403121561058657600080fd5b5035919050565b8581526000602060018060a01b038088168285015280871660408501525060a0606084015284518060a085015260005b818110156105d95786810183015185820160c0015282016105bd565b50600060c0828601015260c0601f19601f83011685010192505050610602608083018415159052565b9695505050505050565b6000806040838503121561061f57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156106665783518352928401929184019160010161064a565b50909695505050505050565b6000806000806060858703121561068857600080fd5b8435935060208501356001600160a01b03811681146106a657600080fd5b9250604085013567ffffffffffffffff808211156106c357600080fd5b818701915087601f8301126106d757600080fd5b8135818111156106e657600080fd5b8860208285010111156106f857600080fd5b95989497505060200194505050565b600181811c9082168061071b57607f821691505b60208210810361073b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103fe576103fe610741565b808201808211156103fe576103fe610741565b634e487b7160e01b600052604160045260246000fd5b6000600182016107a5576107a5610741565b5060010190565b634e487b7160e01b600052603260045260246000fd5b601f82111561080c57600081815260208120601f850160051c810160208610156107e95750805b601f850160051c820191505b81811015610808578281556001016107f5565b5050505b505050565b815167ffffffffffffffff81111561082b5761082b61077d565b61083f816108398454610707565b846107c2565b602080601f831160018114610874576000841561085c5750858301515b600019600386901b1c1916600185901b178555610808565b600085815260208120601f198616915b828110156108a357888601518255948401946001909101908401610884565b50858210156108c15787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220a1f77ad0d0df5cd039ba8e66379958fb4c06a52a69a6abae8be485f40b11e6f364736f6c63430008140033";

type SchedulerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SchedulerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Scheduler__factory extends ContractFactory {
  constructor(...args: SchedulerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Scheduler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Scheduler__factory {
    return super.connect(runner) as Scheduler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SchedulerInterface {
    return new Interface(_abi) as SchedulerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Scheduler {
    return new Contract(address, _abi, runner) as unknown as Scheduler;
  }
}
