/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ChainPilotSchedulerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveTask"
      | "cancelTask"
      | "executeTask(uint256)"
      | "executeTask(address,address,bytes32,uint256)"
      | "executerAddress"
      | "getPendingTasks"
      | "getTaskHash"
      | "scheduleTask"
      | "taskIdCounter"
      | "tasks"
      | "userApprovals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TaskApproved"
      | "TaskCancelled"
      | "TaskExecuted(address,address,bytes32,uint256,bool)"
      | "TaskExecuted(uint256,address)"
      | "TaskScheduled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveTask",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTask(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTask(address,address,bytes32,uint256)",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTasks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskHash",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTask",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taskIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "userApprovals",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTask(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTask(address,address,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userApprovals",
    data: BytesLike
  ): Result;
}

export namespace TaskApprovedEvent {
  export type InputTuple = [
    user: AddressLike,
    taskHash: BytesLike,
    maxValue: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    taskHash: string,
    maxValue: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    user: string;
    taskHash: string;
    maxValue: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCancelledEvent {
  export type InputTuple = [taskId: BigNumberish];
  export type OutputTuple = [taskId: bigint];
  export interface OutputObject {
    taskId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskExecuted_address_address_bytes32_uint256_bool_Event {
  export type InputTuple = [
    user: AddressLike,
    target: AddressLike,
    taskHash: BytesLike,
    value: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    user: string,
    target: string,
    taskHash: string,
    value: bigint,
    success: boolean
  ];
  export interface OutputObject {
    user: string;
    target: string;
    taskHash: string;
    value: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskExecuted_uint256_address_Event {
  export type InputTuple = [taskId: BigNumberish, executor: AddressLike];
  export type OutputTuple = [taskId: bigint, executor: string];
  export interface OutputObject {
    taskId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskScheduledEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    user: AddressLike,
    executer: AddressLike,
    target: AddressLike,
    executeAt: BigNumberish,
    expiryAt: BigNumberish,
    payloadHash: BytesLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    user: string,
    executer: string,
    target: string,
    executeAt: bigint,
    expiryAt: bigint,
    payloadHash: string,
    value: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    user: string;
    executer: string;
    target: string;
    executeAt: bigint;
    expiryAt: bigint;
    payloadHash: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainPilotScheduler extends BaseContract {
  connect(runner?: ContractRunner | null): ChainPilotScheduler;
  waitForDeployment(): Promise<this>;

  interface: ChainPilotSchedulerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveTask: TypedContractMethod<
    [
      target: AddressLike,
      payload: BytesLike,
      maxValue: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cancelTask: TypedContractMethod<[taskId: BigNumberish], [void], "nonpayable">;

  "executeTask(uint256)": TypedContractMethod<
    [taskId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "executeTask(address,address,bytes32,uint256)": TypedContractMethod<
    [
      user: AddressLike,
      target: AddressLike,
      payloadHash: BytesLike,
      value: BigNumberish
    ],
    [boolean],
    "payable"
  >;

  executerAddress: TypedContractMethod<[], [string], "view">;

  getPendingTasks: TypedContractMethod<
    [from: BigNumberish, to: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTaskHash: TypedContractMethod<
    [target: AddressLike, payload: BytesLike, maxValue: BigNumberish],
    [string],
    "view"
  >;

  scheduleTask: TypedContractMethod<
    [
      executeAt: BigNumberish,
      expiryAt: BigNumberish,
      target: AddressLike,
      payload: BytesLike,
      value: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  taskIdCounter: TypedContractMethod<[], [bigint], "view">;

  tasks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, bigint, boolean] & {
        executeAt: bigint;
        expiryAt: bigint;
        user: string;
        executer: string;
        target: string;
        payloadHash: string;
        value: bigint;
        isCancelled: boolean;
      }
    ],
    "view"
  >;

  userApprovals: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [[bigint, bigint] & { maxValue: bigint; deadline: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveTask"
  ): TypedContractMethod<
    [
      target: AddressLike,
      payload: BytesLike,
      maxValue: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelTask"
  ): TypedContractMethod<[taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTask(uint256)"
  ): TypedContractMethod<[taskId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTask(address,address,bytes32,uint256)"
  ): TypedContractMethod<
    [
      user: AddressLike,
      target: AddressLike,
      payloadHash: BytesLike,
      value: BigNumberish
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingTasks"
  ): TypedContractMethod<
    [from: BigNumberish, to: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTaskHash"
  ): TypedContractMethod<
    [target: AddressLike, payload: BytesLike, maxValue: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "scheduleTask"
  ): TypedContractMethod<
    [
      executeAt: BigNumberish,
      expiryAt: BigNumberish,
      target: AddressLike,
      payload: BytesLike,
      value: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "taskIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, bigint, boolean] & {
        executeAt: bigint;
        expiryAt: bigint;
        user: string;
        executer: string;
        target: string;
        payloadHash: string;
        value: bigint;
        isCancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userApprovals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [[bigint, bigint] & { maxValue: bigint; deadline: bigint }],
    "view"
  >;

  getEvent(
    key: "TaskApproved"
  ): TypedContractEvent<
    TaskApprovedEvent.InputTuple,
    TaskApprovedEvent.OutputTuple,
    TaskApprovedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCancelled"
  ): TypedContractEvent<
    TaskCancelledEvent.InputTuple,
    TaskCancelledEvent.OutputTuple,
    TaskCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TaskExecuted(address,address,bytes32,uint256,bool)"
  ): TypedContractEvent<
    TaskExecuted_address_address_bytes32_uint256_bool_Event.InputTuple,
    TaskExecuted_address_address_bytes32_uint256_bool_Event.OutputTuple,
    TaskExecuted_address_address_bytes32_uint256_bool_Event.OutputObject
  >;
  getEvent(
    key: "TaskExecuted(uint256,address)"
  ): TypedContractEvent<
    TaskExecuted_uint256_address_Event.InputTuple,
    TaskExecuted_uint256_address_Event.OutputTuple,
    TaskExecuted_uint256_address_Event.OutputObject
  >;
  getEvent(
    key: "TaskScheduled"
  ): TypedContractEvent<
    TaskScheduledEvent.InputTuple,
    TaskScheduledEvent.OutputTuple,
    TaskScheduledEvent.OutputObject
  >;

  filters: {
    "TaskApproved(address,bytes32,uint256,uint256)": TypedContractEvent<
      TaskApprovedEvent.InputTuple,
      TaskApprovedEvent.OutputTuple,
      TaskApprovedEvent.OutputObject
    >;
    TaskApproved: TypedContractEvent<
      TaskApprovedEvent.InputTuple,
      TaskApprovedEvent.OutputTuple,
      TaskApprovedEvent.OutputObject
    >;

    "TaskCancelled(uint256)": TypedContractEvent<
      TaskCancelledEvent.InputTuple,
      TaskCancelledEvent.OutputTuple,
      TaskCancelledEvent.OutputObject
    >;
    TaskCancelled: TypedContractEvent<
      TaskCancelledEvent.InputTuple,
      TaskCancelledEvent.OutputTuple,
      TaskCancelledEvent.OutputObject
    >;

    "TaskExecuted(address,address,bytes32,uint256,bool)": TypedContractEvent<
      TaskExecuted_address_address_bytes32_uint256_bool_Event.InputTuple,
      TaskExecuted_address_address_bytes32_uint256_bool_Event.OutputTuple,
      TaskExecuted_address_address_bytes32_uint256_bool_Event.OutputObject
    >;
    "TaskExecuted(uint256,address)": TypedContractEvent<
      TaskExecuted_uint256_address_Event.InputTuple,
      TaskExecuted_uint256_address_Event.OutputTuple,
      TaskExecuted_uint256_address_Event.OutputObject
    >;

    "TaskScheduled(uint256,address,address,address,uint64,uint64,bytes32,uint256)": TypedContractEvent<
      TaskScheduledEvent.InputTuple,
      TaskScheduledEvent.OutputTuple,
      TaskScheduledEvent.OutputObject
    >;
    TaskScheduled: TypedContractEvent<
      TaskScheduledEvent.InputTuple,
      TaskScheduledEvent.OutputTuple,
      TaskScheduledEvent.OutputObject
    >;
  };
}
