/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AutomationAgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeTask"
      | "executer"
      | "scheduler"
      | "subscribeTask"
      | "taskIdCounter"
      | "tasks"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TaskAutoExecuted" | "TaskSubscribed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeTask",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "executer", values?: undefined): string;
  encodeFunctionData(functionFragment: "scheduler", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscribeTask",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taskIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "executeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scheduler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
}

export namespace TaskAutoExecutedEvent {
  export type InputTuple = [taskId: BigNumberish, success: boolean];
  export type OutputTuple = [taskId: bigint, success: boolean];
  export interface OutputObject {
    taskId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskSubscribedEvent {
  export type InputTuple = [taskId: BigNumberish, user: AddressLike];
  export type OutputTuple = [taskId: bigint, user: string];
  export interface OutputObject {
    taskId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AutomationAgent extends BaseContract {
  connect(runner?: ContractRunner | null): AutomationAgent;
  waitForDeployment(): Promise<this>;

  interface: AutomationAgentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeTask: TypedContractMethod<
    [taskId: BigNumberish, conditionsProof: BytesLike],
    [void],
    "nonpayable"
  >;

  executer: TypedContractMethod<[], [string], "view">;

  scheduler: TypedContractMethod<[], [string], "view">;

  subscribeTask: TypedContractMethod<
    [
      target: AddressLike,
      payload: BytesLike,
      gasCredit: BigNumberish,
      conditionsHash: BytesLike
    ],
    [bigint],
    "payable"
  >;

  taskIdCounter: TypedContractMethod<[], [bigint], "view">;

  tasks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, string] & {
        user: string;
        target: string;
        payload: string;
        gasCredit: bigint;
        conditionsHash: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeTask"
  ): TypedContractMethod<
    [taskId: BigNumberish, conditionsProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "scheduler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscribeTask"
  ): TypedContractMethod<
    [
      target: AddressLike,
      payload: BytesLike,
      gasCredit: BigNumberish,
      conditionsHash: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "taskIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, string] & {
        user: string;
        target: string;
        payload: string;
        gasCredit: bigint;
        conditionsHash: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TaskAutoExecuted"
  ): TypedContractEvent<
    TaskAutoExecutedEvent.InputTuple,
    TaskAutoExecutedEvent.OutputTuple,
    TaskAutoExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TaskSubscribed"
  ): TypedContractEvent<
    TaskSubscribedEvent.InputTuple,
    TaskSubscribedEvent.OutputTuple,
    TaskSubscribedEvent.OutputObject
  >;

  filters: {
    "TaskAutoExecuted(uint256,bool)": TypedContractEvent<
      TaskAutoExecutedEvent.InputTuple,
      TaskAutoExecutedEvent.OutputTuple,
      TaskAutoExecutedEvent.OutputObject
    >;
    TaskAutoExecuted: TypedContractEvent<
      TaskAutoExecutedEvent.InputTuple,
      TaskAutoExecutedEvent.OutputTuple,
      TaskAutoExecutedEvent.OutputObject
    >;

    "TaskSubscribed(uint256,address)": TypedContractEvent<
      TaskSubscribedEvent.InputTuple,
      TaskSubscribedEvent.OutputTuple,
      TaskSubscribedEvent.OutputObject
    >;
    TaskSubscribed: TypedContractEvent<
      TaskSubscribedEvent.InputTuple,
      TaskSubscribedEvent.OutputTuple,
      TaskSubscribedEvent.OutputObject
    >;
  };
}
