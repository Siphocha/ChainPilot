/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TemplateManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTemplate"
      | "lockTemplate"
      | "templateIdCounter"
      | "templates"
      | "useTemplate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TemplateCreated" | "TemplateUsed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createTemplate",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "templateIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useTemplate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templateIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useTemplate",
    data: BytesLike
  ): Result;
}

export namespace TemplateCreatedEvent {
  export type InputTuple = [templateId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [templateId: bigint, owner: string];
  export interface OutputObject {
    templateId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TemplateUsedEvent {
  export type InputTuple = [templateId: BigNumberish, user: AddressLike];
  export type OutputTuple = [templateId: bigint, user: string];
  export interface OutputObject {
    templateId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TemplateManager extends BaseContract {
  connect(runner?: ContractRunner | null): TemplateManager;
  waitForDeployment(): Promise<this>;

  interface: TemplateManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTemplate: TypedContractMethod<
    [target: AddressLike, payload: BytesLike, isPublic: boolean],
    [bigint],
    "nonpayable"
  >;

  lockTemplate: TypedContractMethod<
    [templateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  templateIdCounter: TypedContractMethod<[], [bigint], "view">;

  templates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean, boolean] & {
        owner: string;
        target: string;
        payload: string;
        isPublic: boolean;
        isLocked: boolean;
      }
    ],
    "view"
  >;

  useTemplate: TypedContractMethod<
    [templateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTemplate"
  ): TypedContractMethod<
    [target: AddressLike, payload: BytesLike, isPublic: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockTemplate"
  ): TypedContractMethod<[templateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "templateIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "templates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean, boolean] & {
        owner: string;
        target: string;
        payload: string;
        isPublic: boolean;
        isLocked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "useTemplate"
  ): TypedContractMethod<[templateId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "TemplateCreated"
  ): TypedContractEvent<
    TemplateCreatedEvent.InputTuple,
    TemplateCreatedEvent.OutputTuple,
    TemplateCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TemplateUsed"
  ): TypedContractEvent<
    TemplateUsedEvent.InputTuple,
    TemplateUsedEvent.OutputTuple,
    TemplateUsedEvent.OutputObject
  >;

  filters: {
    "TemplateCreated(uint256,address)": TypedContractEvent<
      TemplateCreatedEvent.InputTuple,
      TemplateCreatedEvent.OutputTuple,
      TemplateCreatedEvent.OutputObject
    >;
    TemplateCreated: TypedContractEvent<
      TemplateCreatedEvent.InputTuple,
      TemplateCreatedEvent.OutputTuple,
      TemplateCreatedEvent.OutputObject
    >;

    "TemplateUsed(uint256,address)": TypedContractEvent<
      TemplateUsedEvent.InputTuple,
      TemplateUsedEvent.OutputTuple,
      TemplateUsedEvent.OutputObject
    >;
    TemplateUsed: TypedContractEvent<
      TemplateUsedEvent.InputTuple,
      TemplateUsedEvent.OutputTuple,
      TemplateUsedEvent.OutputObject
    >;
  };
}
