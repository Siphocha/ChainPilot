/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ExecuterInterface extends Interface {
  getFunction(
    nameOrSignature: "approveTask" | "executeTask" | "userApprovals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TaskApproved" | "TaskExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveTask",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTask",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userApprovals",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userApprovals",
    data: BytesLike
  ): Result;
}

export namespace TaskApprovedEvent {
  export type InputTuple = [user: AddressLike, taskHash: BytesLike];
  export type OutputTuple = [user: string, taskHash: string];
  export interface OutputObject {
    user: string;
    taskHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    target: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [user: string, target: string, success: boolean];
  export interface OutputObject {
    user: string;
    target: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Executer extends BaseContract {
  connect(runner?: ContractRunner | null): Executer;
  waitForDeployment(): Promise<this>;

  interface: ExecuterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveTask: TypedContractMethod<
    [target: AddressLike, payload: BytesLike, maxValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTask: TypedContractMethod<
    [
      user: AddressLike,
      target: AddressLike,
      payload: BytesLike,
      value: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  userApprovals: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveTask"
  ): TypedContractMethod<
    [target: AddressLike, payload: BytesLike, maxValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTask"
  ): TypedContractMethod<
    [
      user: AddressLike,
      target: AddressLike,
      payload: BytesLike,
      value: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userApprovals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "TaskApproved"
  ): TypedContractEvent<
    TaskApprovedEvent.InputTuple,
    TaskApprovedEvent.OutputTuple,
    TaskApprovedEvent.OutputObject
  >;
  getEvent(
    key: "TaskExecuted"
  ): TypedContractEvent<
    TaskExecutedEvent.InputTuple,
    TaskExecutedEvent.OutputTuple,
    TaskExecutedEvent.OutputObject
  >;

  filters: {
    "TaskApproved(address,bytes32)": TypedContractEvent<
      TaskApprovedEvent.InputTuple,
      TaskApprovedEvent.OutputTuple,
      TaskApprovedEvent.OutputObject
    >;
    TaskApproved: TypedContractEvent<
      TaskApprovedEvent.InputTuple,
      TaskApprovedEvent.OutputTuple,
      TaskApprovedEvent.OutputObject
    >;

    "TaskExecuted(address,address,bool)": TypedContractEvent<
      TaskExecutedEvent.InputTuple,
      TaskExecutedEvent.OutputTuple,
      TaskExecutedEvent.OutputObject
    >;
    TaskExecuted: TypedContractEvent<
      TaskExecutedEvent.InputTuple,
      TaskExecutedEvent.OutputTuple,
      TaskExecutedEvent.OutputObject
    >;
  };
}
