/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AutomationAgent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationAgent__factory>;
    getContractFactory(
      name: "ChainPilotExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainPilotExecutor__factory>;
    getContractFactory(
      name: "ChainPilotScheduler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainPilotScheduler__factory>;
    getContractFactory(
      name: "TemplateManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TemplateManager__factory>;
    getContractFactory(
      name: "IAutomationAgent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutomationAgent__factory>;
    getContractFactory(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutor__factory>;
    getContractFactory(
      name: "IScheduler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScheduler__factory>;
    getContractFactory(
      name: "ITemplateManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemplateManager__factory>;
    getContractFactory(
      name: "Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base__factory>;
    getContractFactory(
      name: "PaymentsModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PaymentsModule__factory>;
    getContractFactory(
      name: "StakingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingModule__factory>;

    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AutomationAgent",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationAgent>;
    getContractAt(
      name: "ChainPilotExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainPilotExecutor>;
    getContractAt(
      name: "ChainPilotScheduler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainPilotScheduler>;
    getContractAt(
      name: "TemplateManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TemplateManager>;
    getContractAt(
      name: "IAutomationAgent",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutomationAgent>;
    getContractAt(
      name: "IExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutor>;
    getContractAt(
      name: "IScheduler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IScheduler>;
    getContractAt(
      name: "ITemplateManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemplateManager>;
    getContractAt(
      name: "Base",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Base>;
    getContractAt(
      name: "PaymentsModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PaymentsModule>;
    getContractAt(
      name: "StakingModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingModule>;

    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "AutomationAgent",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationAgent>;
    deployContract(
      name: "ChainPilotExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainPilotExecutor>;
    deployContract(
      name: "ChainPilotScheduler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainPilotScheduler>;
    deployContract(
      name: "TemplateManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TemplateManager>;
    deployContract(
      name: "IAutomationAgent",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAutomationAgent>;
    deployContract(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutor>;
    deployContract(
      name: "IScheduler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IScheduler>;
    deployContract(
      name: "ITemplateManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITemplateManager>;
    deployContract(
      name: "Base",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Base>;
    deployContract(
      name: "PaymentsModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PaymentsModule>;
    deployContract(
      name: "StakingModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingModule>;

    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "AutomationAgent",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationAgent>;
    deployContract(
      name: "ChainPilotExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainPilotExecutor>;
    deployContract(
      name: "ChainPilotScheduler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainPilotScheduler>;
    deployContract(
      name: "TemplateManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TemplateManager>;
    deployContract(
      name: "IAutomationAgent",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAutomationAgent>;
    deployContract(
      name: "IExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutor>;
    deployContract(
      name: "IScheduler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IScheduler>;
    deployContract(
      name: "ITemplateManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITemplateManager>;
    deployContract(
      name: "Base",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Base>;
    deployContract(
      name: "PaymentsModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PaymentsModule>;
    deployContract(
      name: "StakingModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingModule>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
